<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://kevin5979.github.io</id>
    <title>kevin5979</title>
    <updated>2022-07-06T15:57:49.365Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://kevin5979.github.io"/>
    <link rel="self" href="http://kevin5979.github.io/atom.xml"/>
    <subtitle>随影的碎碎念</subtitle>
    <logo>http://kevin5979.github.io/images/avatar.png</logo>
    <icon>http://kevin5979.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, kevin5979</rights>
    <entry>
        <title type="html"><![CDATA[记录我的毕业]]></title>
        <id>http://kevin5979.github.io/post/ji-lu-wo-de-bi-ye/</id>
        <link href="http://kevin5979.github.io/post/ji-lu-wo-de-bi-ye/">
        </link>
        <updated>2022-07-06T14:52:53.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="http://kevin5979.github.io/post-images/1657121581446.jpg" alt="" loading="lazy"></figure>
<h2 id="毕业">毕业</h2>
<p>转眼到了六七月盛夏，完成了毕业设计，拿到毕业证书仿佛就是一瞬间，一瞬间被扔到社会上接受毒打，都还没准备好，大家就搬着行李各执一路，我宿舍的四个人，在最后甚至没有再吃过一顿饭，没有再拍一张集体照。</p>
<h2 id="同学们">同学们</h2>
<p>记得最后离校的几天，每天在隔壁的宿舍聊天吹牛，什么都讲，大家欢聚一堂，可能这便是大学四年散场最后的喧嚣。大家一起聊工作，聊八卦，互相打闹，相互调侃，估计再过几个月，这个宿舍还会再次迎来新的一批主人，一届一届事物依旧。</p>
<h2 id="如今">如今</h2>
<p>十几平米的小单间，承载着我这生活的全部，每天8点出门，7点回来，朝九晚六的工作，最最让我开心的是，每天和家里打微信视频的聊天，聊聊今天的工作，以及周围的一切新奇的事情，这真的是我独居小单间最大的，也是最幸福的事情。</p>
<h2 id="工作">工作</h2>
<p>都说今年应届毕业生工作难找，我是见识到了，在深圳的一个月里，大大小小面了十来家，终于才拿到一个offer, 我很幸运，也很珍惜，之前我也想过转行，也找过别的工作，但别人都不要，真实的心塞，就像家里人说的，先入行，再考虑薪资的情况，嗯，目前我已经上班几天了，公司同事们都挺照顾我，希望能在这家公司成长吧。</p>
<h2 id="治愈">治愈</h2>
<p>最近迷上了听这种治愈的歌曲，每天在公交、地铁上，难免会思绪翻涌，一些对于未来的想法，面包和理想，鼓励自己坚持下去，我已经毕业了，是社会了，不在小孩子脾气，摒弃学生的办事思维，要努力，要分担家里负担，希望一切顺利吧。</p>
<h2 id="跃入人海">跃入人海</h2>
<p>再见了，学生生涯，让我们一起跃入人海，做一朵奔涌的浪花。</p>
 <br/>
<font size="2">最后更新于 2022-7-6</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年度总结]]></title>
        <id>http://kevin5979.github.io/post/2021-nian-du-zong-jie/</id>
        <link href="http://kevin5979.github.io/post/2021-nian-du-zong-jie/">
        </link>
        <updated>2021-12-31T01:36:43.000Z</updated>
        <summary type="html"><![CDATA[<p>时光匆匆，又一年准备结束了，回顾一年来的工作生活，收获了许多❤️💛💚💙💜🖤💗</p>
]]></summary>
        <content type="html"><![CDATA[<p>时光匆匆，又一年准备结束了，回顾一年来的工作生活，收获了许多❤️💛💚💙💜🖤💗</p>
<!-- more -->
<p>写了很多，最后删了，2021这一年，从学生逐渐转进入社会，找到了实习工作，技术上没有学习到新技术，但经历了几个项目之后，我对之前的技术知识掌握更加深刻，另外，今天也是离职的日子，2021给予我的是更多的精神方面和接人待物方面的成长，今年总结贴几个标签算了，来年继续努力</p>
<p>🥕学校考试顺利通过，已达到毕业要求🥕<br>
🥕找到实习工作🥕<br>
🥕换新手机了🥕<br>
🥕软考高级挂了，下次加油🥕<br>
🥕找到实习工作🥕<br>
🥕去上海出差🥕<br>
🥕毕业设计选题🥕<br>
🥕今天离职啦🥕</p>
<p>2022许愿， ❤️找到满意的工作，再换台电脑，顺利毕业❤️</p>
 <br/>
<font size="2">最后更新于 2021-12-31</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git 如何把develop分支代码合并到master主分支？]]></title>
        <id>http://kevin5979.github.io/post/git-ru-he-ba-develop-fen-zhi-dai-ma-he-bing-dao-master-zhu-fen-zhi/</id>
        <link href="http://kevin5979.github.io/post/git-ru-he-ba-develop-fen-zhi-dai-ma-he-bing-dao-master-zhu-fen-zhi/">
        </link>
        <updated>2021-12-16T03:10:37.000Z</updated>
        <summary type="html"><![CDATA[<p><code>master 主分支</code>  <code>develop 分支</code><br>
一般我们在开发项目的过程中，会在分支中去开发，在开发结束的一个周期再把代码代码合并到主分支中。所以就会存在一个问题，如何把分支代码合并到主分支，接下来记录一下我合并分支的一个命令流程</p>
<p><strong>前提是，分支代码和主分支代码不会有冲突，就是说主分支目前的所有的代码和分支那部分代码是相同的。</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p><code>master 主分支</code>  <code>develop 分支</code><br>
一般我们在开发项目的过程中，会在分支中去开发，在开发结束的一个周期再把代码代码合并到主分支中。所以就会存在一个问题，如何把分支代码合并到主分支，接下来记录一下我合并分支的一个命令流程</p>
<p><strong>前提是，分支代码和主分支代码不会有冲突，就是说主分支目前的所有的代码和分支那部分代码是相同的。</strong></p>
<!-- more -->
<h3 id="1切换分支">1.切换分支</h3>
<blockquote>
<p>git checkout develop</p>
</blockquote>
<h3 id="2用git-pull-把分支代码pull下来">2.用git pull 把分支代码pull下来</h3>
<blockquote>
<p>git pull origin develop</p>
</blockquote>
<h3 id="3切换到主分支">3.切换到主分支</h3>
<blockquote>
<p>git checkout master</p>
</blockquote>
<h3 id="4把分支的代码merge到主分支">4.把分支的代码merge到主分支</h3>
<blockquote>
<p>git merge develop</p>
</blockquote>
<h3 id="5git-push推送到远程仓库现在你自己分支的代码就合并到主分支上了">5.git push推送到远程仓库，现在你自己分支的代码就合并到主分支上了。</h3>
<blockquote>
<p>git push origin master</p>
</blockquote>
 <br/>
<font size="2">最后更新于 2021-12-16</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我到上海的两周]]></title>
        <id>http://kevin5979.github.io/post/wo-dao-shang-hai-de-liang-zhou/</id>
        <link href="http://kevin5979.github.io/post/wo-dao-shang-hai-de-liang-zhou/">
        </link>
        <updated>2021-12-10T14:41:44.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>最近两周去了上海参与了柚趣盲盒项目的开发，比较忙，今天已经回到深圳啦😋，记录一下我在上海的感受吧</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>最近两周去了上海参与了柚趣盲盒项目的开发，比较忙，今天已经回到深圳啦😋，记录一下我在上海的感受吧</strong></p>
<!-- more -->
<h3 id="关于天气">关于天气</h3>
<p>刚开始查询上海的天气的时候，2<sub>3度的最低温，然后就带了几件我最厚的衣服，没想到，只是比深圳冷一点，带去的衣服没用上</sub></p>
<h3 id="关于交通">关于交通</h3>
<p>上海的地铁感觉有些慢节奏，开关门都是1分钟以上的感觉，这要是在深圳，感觉15秒都多了.. 从酒店到公司，30分钟的路程，走路，周边风景很美，绿化也很好，空气清晰，你还能看到每天早上有人在湖边钓鱼，十分惬意</p>
<h3 id="公司的氛围">公司的氛围</h3>
<p>上海柚子工道是一家很有凝聚力的公司，上班时间也比较松，周末双休，早上是9点半到10点 到公司就可以，中午11点半就可以吃午饭啦，下午是一点钟到6点半的上班时间，上班是可以有很多讨论，特别是业务相关的讨论，每个人都认真提出自己的想法，群策群力，氛围很可以</p>
<h3 id="关于好吃的">关于好吃的</h3>
<p>公司楼下就有餐厅，手撕鸡不错，其他的也可以，菜品比较多，价格正常，可能比深圳的贵一丢丢，我也就会吃.. 菜名不记得了😶</p>
<h3 id="上海的景点">上海的景点</h3>
<p>周末时间去了下外滩，南京街，东方明珠，夜景很好看，很多感慨，大都市的风采，游人也很礼貌，感觉很好，希望下次还能来呀</p>
<figure data-type="image" tabindex="1"><img src="http://kevin5979.github.io/post-images/1639199215487.jpg" alt="" loading="lazy"></figure>
<p>回到深圳，继续加油！！！<br>
今天周六，祝大家周末愉快！！！</p>
 <br/>
<font size="2">最后更新于 2021-12-10</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[总结: 时间格式化]]></title>
        <id>http://kevin5979.github.io/post/zong-jie-shi-jian-ge-shi-hua/</id>
        <link href="http://kevin5979.github.io/post/zong-jie-shi-jian-ge-shi-hua/">
        </link>
        <updated>2021-11-13T15:03:56.000Z</updated>
        <summary type="html"><![CDATA[<p>最近在搞自己的uni-app小项目，发现时间格式化功能非常常用的，而我又不想使用 <code>dayjs</code> 等工具，所以，记录一下时间格式化的工具函数⏱，以后都能来这里复制粘贴啦</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近在搞自己的uni-app小项目，发现时间格式化功能非常常用的，而我又不想使用 <code>dayjs</code> 等工具，所以，记录一下时间格式化的工具函数⏱，以后都能来这里复制粘贴啦</p>
<!-- more -->
<h2 id="直接上代码">直接上代码</h2>
<pre><code class="language-js">export function dateFormat(birthday,fmt) {
	let date = new Date(birthday);
	let ret;
	const opt = {
		&quot;Y+&quot;: date.getFullYear().toString(), // 年
		&quot;M+&quot;: (date.getMonth() + 1).toString(), // 月
		&quot;D+&quot;: date.getDate().toString(), // 日
		&quot;h+&quot;: date.getHours().toString(), // 时
		&quot;m+&quot;: date.getMinutes().toString(), // 分
		&quot;s+&quot;: date.getSeconds().toString() // 秒
		// 有其他格式化字符需求可以继续添加，必须转化成字符串
	};
	for (let k in opt) {
		ret = new RegExp(&quot;(&quot; + k + &quot;)&quot;).exec(fmt);
		if (ret) {
			fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, &quot;0&quot;)))
		};
	};
	return fmt;
}
</code></pre>
<p>今天周六，祝大家周末愉快！！！</p>
 <br/>
<font size="2">最后更新于 2021-11-13</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uni-app 路由管理 (uni-simple-router)]]></title>
        <id>http://kevin5979.github.io/post/uni-app-lu-you-guan-li-uni-simple-router/</id>
        <link href="http://kevin5979.github.io/post/uni-app-lu-you-guan-li-uni-simple-router/">
        </link>
        <updated>2021-11-10T01:49:53.000Z</updated>
        <summary type="html"><![CDATA[<p>这周天气变冷，我都不想动了🥗，前几天准备重写一下之前的uni-app项目，发现之前写的不是很优雅，路由管理不是很好，百度一波，顺利找到 <a href="https://hhyang.cn/v2/start/quickstart.html">uni-simple-router</a>，试验一波，顺利上车啦🙊</p>
]]></summary>
        <content type="html"><![CDATA[<p>这周天气变冷，我都不想动了🥗，前几天准备重写一下之前的uni-app项目，发现之前写的不是很优雅，路由管理不是很好，百度一波，顺利找到 <a href="https://hhyang.cn/v2/start/quickstart.html">uni-simple-router</a>，试验一波，顺利上车啦🙊</p>
<!-- more -->
<h2 id="算了文档已经写的很清楚">算了，文档已经写的很清楚...</h2>
<p>忙着双十一加购物车呢😘，谁有空啊~，自己看文档 <a href="https://hhyang.cn/v2/start/quickstart.html">uni-simple-router</a></p>
 <br/>
<font size="2">最后更新于 2021-11-10</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[认识侦听器watch]]></title>
        <id>http://kevin5979.github.io/post/ren-shi-zhen-ting-qi-watch/</id>
        <link href="http://kevin5979.github.io/post/ren-shi-zhen-ting-qi-watch/">
        </link>
        <updated>2021-11-04T03:12:30.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="什么是侦听器呢">什么是侦听器呢？</h2>
<ul>
<li>开发中我们在data返回的对象中定义了数据，这个数据通过插值语法等方式绑定到template中；</li>
<li>当数据变化时，template会自动进行更新来显示最新的数据；</li>
<li>但是在某些情况下，我们希望在代码逻辑中监听某个数据的变化，这个时候就需要用侦听器watch来完成了；</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="什么是侦听器呢">什么是侦听器呢？</h2>
<ul>
<li>开发中我们在data返回的对象中定义了数据，这个数据通过插值语法等方式绑定到template中；</li>
<li>当数据变化时，template会自动进行更新来显示最新的数据；</li>
<li>但是在某些情况下，我们希望在代码逻辑中监听某个数据的变化，这个时候就需要用侦听器watch来完成了；</li>
</ul>
<!-- more -->
<h2 id="侦听器的用法">侦听器的用法</h2>
<ul>
<li>选项：watch</li>
<li>类型：<code>{ [key: string]: string | Function | Object | Array}</code></li>
<li>详细：一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 <code>$watch()</code>，遍历<code>watch</code>对象的每一个 <code>property</code>。</li>
</ul>
<h2 id="使用例子">使用例子</h2>
<pre><code class="language-js">var vm = new Vue({
  data: {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    e: {
      f: {
        g: 5
      }
    }
  },
  watch: {
    a: function (val, oldVal) {     // 最常见用法
      console.log('new: %s, old: %s', val, oldVal)
    },
    // 方法名 someMethod 必须在 methods 中定义
    b: 'someMethod',
    // deep: true 
    // 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深
    c: {
      handler: function (val, oldVal) { /* ... */ },
      deep: true
    },
    // immediate: true
    // 该回调将会在侦听开始之后被立即调用
    d: {
      handler: 'someMethod',
      immediate: true
    },
    // 你可以传入回调数组，它们会被逐一调用
    e: [
      'handle1',
      function handle2 (val, oldVal) { /* ... */ },
      {
        handler: function handle3 (val, oldVal) { /* ... */ },
        /* ... */
      }
    ],
    // watch vm.e.f's value: {g: 5}
    'e.f': function (val, oldVal) { /* ... */ }
  }
})
vm.a = 2 // =&gt; new: 2, old: 1
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://kevin5979.github.io/post-images/1635996325170.png" alt="" loading="lazy"></figure>
<h2 id="vmwatch-exporfn-callback-options">vm.$watch( expOrFn, callback, [options] )</h2>
<ul>
<li>我们可以在created的生命周期中，使用this.$watchs来侦听；
<ul>
<li>第一个参数是要侦听的源；</li>
<li>第二个参数是侦听的回调函数callback；</li>
<li>第三个参数是额外的其他选项，比如deep、immediate；</li>
<li>返回一个取消观察函数，用来停止触发回调：</li>
</ul>
</li>
</ul>
<p><img src="http://kevin5979.github.io/post-images/1635996639727.png" alt="" loading="lazy"><br>
<img src="http://kevin5979.github.io/post-images/1635996828669.png" alt="" loading="lazy"></p>
<p>*链接: https://cn.vuejs.org/v2/api/#vm-watch</p>
<h2 id="注意">注意</h2>
<figure data-type="image" tabindex="2"><img src="http://kevin5979.github.io/post-images/1635996472366.png" alt="" loading="lazy"></figure>
 <br/>
<font size="2">最后更新于 2021-11-4</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ref 和 options]]></title>
        <id>http://kevin5979.github.io/post/ref-he-options/</id>
        <link href="http://kevin5979.github.io/post/ref-he-options/">
        </link>
        <updated>2021-11-01T07:13:04.000Z</updated>
        <summary type="html"><![CDATA[<p>最近上班用vue写一个管理系统，很多的表格页面都会有弹出窗，也会有很多的分页请求等等通用功能，这里记录一些管理系统的通用简便写法🚕🚕🚕（昨天剪了个很丑的头发，气死😤我了）</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近上班用vue写一个管理系统，很多的表格页面都会有弹出窗，也会有很多的分页请求等等通用功能，这里记录一些管理系统的通用简便写法🚕🚕🚕（昨天剪了个很丑的头发，气死😤我了）</p>
<!-- more -->
<h2 id="ref-来控制弹出窗">ref 来控制弹出窗</h2>
<h3 id="步骤">步骤</h3>
<ol>
<li>主页面中给弹窗组件添加ref</li>
<li>使用ref获取弹窗组件元素，调用组件的init方法，并传递参数</li>
<li>在弹窗组件中保存数据，进行渲染等操作</li>
<li>如果有事件通知父组件，通过$emit来发送</li>
</ol>
<h3 id="代码">代码</h3>
<pre><code class="language-html">&lt;handle ref=&quot;handle&quot; /&gt;
</code></pre>
<pre><code class="language-js">this.$nextTick(() =&gt; {
    this.$refs.handle.init('参数');
});
</code></pre>
<pre><code class="language-js">&lt;template&gt;
  &lt;el-dialog
    v-if=&quot;open&quot;
    title=&quot;查看&quot;
    top=&quot;6vh&quot;
    append-to-body
    :visible.sync=&quot;open&quot;
    :before-close=&quot;handleClose&quot;
  &gt;
    内容
  &lt;/el-dialog&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: &quot;handle&quot;,
  data() {
    return {
      open: false,
      list: {}
    };
  },
  methods: {
    init(data) {
      this.open = true;
      this.list = data;
    },
    handleClose(done) { // 关闭
    // this.$emit('event')
      done();
    }
  }
};
&lt;/script&gt;

&lt;style scoped&gt;&lt;/style&gt;
</code></pre>
<h2 id="options-初始化data数据">options 初始化data数据</h2>
<h3 id="语法-thisoptionsdata">语法 : this.$options.data()</h3>
<ul>
<li>注意：data()中若使用了this来访问props或methods，在重置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">注</mi><mi mathvariant="normal">意</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">data时，注意this.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">注</span><span class="mord cjk_fallback">意</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord">.</span></span></span></span>options.data()的this指向，最好使用this.$options.data.call(this)。</li>
</ul>
<h3 id="代码-2">代码</h3>
<pre><code class="language-js">data() {
  return {
    queryParams: {
      current: 1,
      size: 10,
      supplierNum: &quot;&quot;
    }
  }
}

// 重置
resetQuery() {
  this.queryParams = this.$options.data().call(this).queryParams;
  this.getList();
}
</code></pre>
<br/>
<font size="2">最后更新于 2021-11-1</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信小程序的路由拦截]]></title>
        <id>http://kevin5979.github.io/post/wei-xin-xiao-cheng-xu-de-lu-you-lan-jie/</id>
        <link href="http://kevin5979.github.io/post/wei-xin-xiao-cheng-xu-de-lu-you-lan-jie/">
        </link>
        <updated>2021-10-29T01:44:26.000Z</updated>
        <summary type="html"><![CDATA[<p>昨天写了个小程序案例，发现小程序没有提供路由拦截的功能，查了半天资料，终于是搞定了，这里记录一下下<br>
PS: 如果对node.js比较熟悉的话，应该对express/koa框架中的经常提到的中间件概念比较熟悉，这里就使用中间件的机制来处理。结合小程序中<code>Page()函数</code>和<code>生命周期</code></p>
]]></summary>
        <content type="html"><![CDATA[<p>昨天写了个小程序案例，发现小程序没有提供路由拦截的功能，查了半天资料，终于是搞定了，这里记录一下下<br>
PS: 如果对node.js比较熟悉的话，应该对express/koa框架中的经常提到的中间件概念比较熟悉，这里就使用中间件的机制来处理。结合小程序中<code>Page()函数</code>和<code>生命周期</code></p>
<!-- more -->
<h2 id="需求描述">需求描述</h2>
<blockquote>
<p>小程序需开发过程中，有些页面我们希望用户登录授权后才可以使用，然而我们不能再每个页面添加登录验证代码，这样似乎太麻烦了，希望能制作一个通用的小程序路由拦截器</p>
</blockquote>
<h2 id="实现过程">实现过程</h2>
<h3 id="微信授权代码">微信授权代码</h3>
<pre><code class="language-js">wx.getUserProfile({
  desc: '用于完善会员资料', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
  success: (res) =&gt; {
    this.setData({
    userInfo: res.userInfo
    })
  }
})
</code></pre>
<h3 id="用户资料的保存-清除">用户资料的保存、清除</h3>
<pre><code class="language-js">wx.getUserProfile({
  desc: '用于完善会员资料', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
  success: (res) =&gt; {
    this.setData({
    userInfo: res.userInfo
    })
    wx.setStorageSync('userInfo', res.userInfo)
  },
  fail() {
    this.setData({
      userInfo: {}
    })
    wx.removeStorageSync('userInfo')
  }
})
</code></pre>
<h3 id="全局路由拦截器">全局路由拦截器</h3>
<ul>
<li>拦截page页面的<code>onShow方法</code>，判断是否有权限</li>
</ul>
<pre><code class="language-js"> /**
  * routerFillter --全局路由拦截器
  * @function
  * @param{Object} pageObj 当前页面的page对象
  * @param{Boolean} flag 是否开启权限判断
  */
 exports.routerFilter = function (pageObj, flag = true) {
     if (flag) {
         pageObj.onShow = () =&gt; {
             if (!wx.getStorageSync('userInfo')) {
                 let pages = getCurrentPages();
                 let currPage = null;
                 if (pages.length) {
                     currPage = pages[pages.length - 1];
                 }
                 wx.setStorageSync('prevRouter', currPage.route) // 记录当前路由，用于登录完跳转回当前页面
                  wx.redirectTo({
                      url: '/pages/auth/auth',
                  })
             }
         }
     }
     return Page(pageObj)
 }
</code></pre>
<h3 id="授权代码修改">授权代码修改</h3>
<ul>
<li>成功后返回之前页面</li>
</ul>
<pre><code class="language-js">//检测授权登录
getUserProfile() {
    wx.getUserProfile({
        desc: '用于完善资料',
        success: (res) =&gt; {
            this.setData({
                'userInfo.avatarUrl': res.userInfo.avatarUrl,
                'userInfo.gender': res.userInfo.gender,
                'userInfo.nickName': res.userInfo.nickName
            })
            wx.setStorageSync('userInfo', res.userInfo)
            wx.navigateTo({
                url: wx.getStorageSync('prevRouter'), // 使用路由跳转
                fail: () =&gt; {
                    wx.switchTab({
                        url: '/' + wx.getStorageSync('prevRouter') // tab跳转
                    })
                }
            })
        },
        fail() {
            wx.removeStorageSync('userInfo')
            wx.navigateBack({
                delta: 1
            })
        }
    })
}
</code></pre>
<h3 id="使用拦截器">使用拦截器</h3>
<ul>
<li>routerFillter 替换 Page</li>
</ul>
<pre><code class="language-js">import {
    routerFillter
} from '../../utils/filter.js';
routerFillter({
    // 内部和原来的Page一样
})
</code></pre>
<h2 id="总结">总结</h2>
<ul>
<li>上面贴代码有点乱了，这里再写一下过程😘
<ul>
<li>编写授权页面，授权按钮绑定事件</li>
<li>在事件中 编写微信授权代码</li>
<li>在工具函数中创建 全局路由拦截器，编写函数</li>
<li>修改微信授权代码，处理路由跳转</li>
<li>在需要的页面中使用</li>
</ul>
</li>
</ul>
<br/>
<font size="2">最后更新于 2021-10-29</font>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客平台后端开发记录 - 通用模式开发(用户动态接口)]]></title>
        <id>http://kevin5979.github.io/post/bo-ke-ping-tai-hou-duan-kai-fa-ji-lu-tong-yong-mo-shi-kai-fa-yong-hu-dong-tai-jie-kou/</id>
        <link href="http://kevin5979.github.io/post/bo-ke-ping-tai-hou-duan-kai-fa-ji-lu-tong-yong-mo-shi-kai-fa-yong-hu-dong-tai-jie-kou/">
        </link>
        <updated>2021-10-27T01:28:18.000Z</updated>
        <summary type="html"><![CDATA[<p>*考虑到后面接口的编写都是一个套路，这里用一个用户动态接口的增删改查来当个模板吧，后面的接口，按这个格式修改一下就OK了❤️❤️❤️</p>
]]></summary>
        <content type="html"><![CDATA[<p>*考虑到后面接口的编写都是一个套路，这里用一个用户动态接口的增删改查来当个模板吧，后面的接口，按这个格式修改一下就OK了❤️❤️❤️</p>
<!-- more -->
<h2 id="创建用户动态表">创建用户动态表</h2>
<pre><code class="language-js">CREATE TABLE IF NOT EXISTS `moment`(
	id INT PRIMARY KEY AUTO_INCREMENT,
	content VARCHAR(1000) NOT NULL,
    user_id INT NOT NULL,
	createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updataAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	FOREIGN KEY(user_id) REFERENCES user(id)
);
</code></pre>
<h2 id="创建动态路由">创建动态路由</h2>
<h3 id="创建-routermomentrouterjs-文件">创建 router/moment.router.js 文件</h3>
<pre><code class="language-js">const Router = require('koa-router');

const momentRouter = new Router({
  prefix: &quot;/moment&quot;
});

momentRouter.post(&quot;/&quot;, (ctx) =&gt; {
  ctx.body = &quot;创建动态&quot;
})

module.exports = momentRouter;
</code></pre>
<h3 id="验证token是否有效-编辑-routermomentrouterjs">验证token是否有效  编辑 router/moment.router.js</h3>
<pre><code class="language-js">const { verifyAuth } = require('../middleware/auth.middleware');

momentRouter.post(&quot;/&quot;, verifyAuth);
</code></pre>
<h3 id="新建-momentcontrollerjs-文件控制层连接路由和服务层">新建 moment.controller.js 文件，控制层，连接路由和服务层</h3>
<pre><code class="language-js">const momentService = require('../service/moment.service');

class MomentController {
  // 创建动态
  async create(ctx, next) {
    // 1.获取用户信息
    const user = ctx.user;
    // 2.获取用户动态
    const { content } = ctx.request.body;
    // 3.操作数据库
    const result = await momentService.create(user, content);
    // 4.返回结果
    ctx.body = result;
  }
}

module.exports = new MomentController();
</code></pre>
<h3 id="新建-momentservicejs-文件服务层与数据库交互">新建 moment.service.js 文件，服务层，与数据库交互</h3>
<pre><code class="language-js">const connection = require('../app/database');

class MomentService {
  // 创建动态
  async create(user, content) {
    // 1.插入数据库
    try {
      const sql = `insert into moment (content, user_id) values(?,?)`;
      const result = await connection.execute(sql, [content, user.id]);
      return result;
    } catch (error) {
      console.log(error);
    }
  }
}

module.exports = new MomentService();
</code></pre>
<h3 id="修改-routermomentrouterjs-文件">修改 router/moment.router.js 文件</h3>
<pre><code class="language-js">const { verifyAuth } = require('../middleware/auth.middleware');
const { create } = require('../controller/moment.controller');

momentRouter.post(&quot;/&quot;, verifyAuth, create);
</code></pre>
<p><img src="http://kevin5979.github.io/post-images/1635299130391.jpg" alt="" loading="lazy"><br>
*成功添加动态</p>
<h2 id="获取某条动态">获取某条动态</h2>
<h3 id="添加路由编辑-momentrouterjs">添加路由，编辑 moment.router.js</h3>
<pre><code class="language-js">const { create, detail } = require('../controller/moment.controller');

// 根据id获取某条动态
momentRouter.get(&quot;/:momentId&quot;, detail)
</code></pre>
<h3 id="添加-detail-方法编辑-momentcontrollerjs">添加 detail 方法，编辑 moment.controller.js</h3>
<pre><code class="language-js">// 动态详情
async detail(ctx, next) {
  // 1.获取动态id
  const momentId = ctx.params.momentId;
  // 2.查询数据库
  const result = await momentService.getMomentById(momentId);
  // 3.返回结果
  ctx.body = result;
}
</code></pre>
<h3 id="添加-getmomentbyid-方法编辑-servicemomentservicejs">添加 getMomentById 方法，编辑 service/moment.service.js</h3>
<pre><code class="language-js">// 根据id获取动态
async getMomentById(momentId) {
  try {
    const statement = `select * from moment where id = ?`;
    const result = await connection.execute(statement, [momentId]);
    return result[0];
  } catch (error) {
    console.log(error);
  }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://kevin5979.github.io/post-images/1635299448408.jpg" alt="" loading="lazy"></figure>
<p>*成功获取动态</p>
<h2 id="获取动态列表">获取动态列表</h2>
<h3 id="添加路由编辑-routermomentjs">添加路由，编辑 router/moment.js</h3>
<pre><code class="language-js">const { create, detail, list } = require('../controller/moment.controller');
// 获取多条动态
momentRouter.get(&quot;/&quot;, list);
</code></pre>
<h3 id="添加-list-方法编辑-controllermomentcontrollerjs">添加 list 方法，编辑 controller/moment.controller.js</h3>
<pre><code class="language-js">// 动态列表
async list(ctx, next) {
  // 1.获取 offset/limit
  const { offset, limit } = ctx.query;
  // 2.查询数据
  const result = await momentService.getMomentList(offset, limit);
  // 3.返回结果
  ctx.body = result;
}
</code></pre>
<h3 id="添加-getmomentlist-方法编辑-servicemomentservicejs">添加 getMomentList 方法，编辑 service/moment.service.js</h3>
<pre><code class="language-js">  // 获取动态列表
async getMomentList(offset, limit) {
  try {
    const statement = `SELECT 
                        m.id id,
                        m.content content, 
                        m.createAt createTime,
                        m.updataAt updataTime,
                      JSON_OBJECT('id', u.id, 'nickname', u.nickname) user
                      FROM moment m
                      LEFT JOIN user u ON m.user_id = u.id
                      LIMIT ?, ?`;
    const result = await connection.execute(statement, [offset, limit]);
    return result[0];
  } catch (error) {
    console.log(error);
  }
}
</code></pre>
<p><img src="http://kevin5979.github.io/post-images/1635299656042.jpg" alt="" loading="lazy"><br>
*成功获取动态列表</p>
<h2 id="修改一条动态">修改一条动态</h2>
<h3 id="添加路由编辑-routermomentrouterjs">添加路由，编辑 router/moment.router.js</h3>
<pre><code class="language-js">const { verifyAuth, verifyPermission } = require('../middleware/auth.middleware');
const { create, detail, list, update } = require('../controller/moment.controller');

// 修改一条动态
/**
verifyAuth : 验证token是否有效
verifyPermission : 验证用户是否具备权限
update : 更新动态
*/
momentRouter.patch(&quot;/:momentId&quot;, verifyAuth, verifyPermission, update);
</code></pre>
<h3 id="添加-verifypermission-方法编写-middlewareauthmiddlewarejs">添加 verifyPermission 方法，编写 middleware/auth.middleware.js</h3>
<pre><code class="language-js">const authService = require('../service/auth.service');

// 验证用户操作权限
const verifyPermission = async (ctx, next) =&gt; {
  // 1.获取参数
  const [resourceKey] = Object.keys(ctx.params); // 操作的字段  momentId
  const tableName = resourceKey.replace(&quot;Id&quot;, &quot;&quot;); // 操作的表名  moment
  const resourceId = ctx.params[resourceKey]; // 操作字段的值  1
  const { id } = ctx.user; // 当前用户id  1
  // 2.查询是否具备权限
  try {
    const isPermission = await authService.checkResource(tableName, resourceId, id);
    if (!isPermission) {// 没有权限
      const error = new Error(errorTypes.UN_PERMISSION);
      ctx.app.emit('error', error, ctx);
    }
    await next();
  } catch (error) {
    console.log(error);
  }
}
</code></pre>
<h3 id="编写-checkresource-方法-检测权限创建-serviceauthservicejs-文件">编写 checkResource 方法， 检测权限，创建 service/auth.service.js 文件</h3>
<pre><code class="language-js">const connection = require(&quot;../app/database&quot;);

class AuthService {
  // 查询动态权限
  async checkResource(tableName, id, userId) {
    try {
      const statement = `select * from ${tableName} where id = ? and user_id = ?`;
      const [result] = await connection.execute(statement, [id, userId]);
      return result.length === 0 ? false : true;
    } catch (error) {
      console.log(error);
    }
  }
}

module.exports = new AuthService();
</code></pre>
<h3 id="添加-update-方法修改动态编辑-servicemomentservicejs">添加 update 方法，修改动态，编辑 service/moment.service.js</h3>
<pre><code class="language-js">// 修改动态
async update(content, momentId) {
  try {
    const statement = `UPDATE moment SET content = ? WHERE id = ?`;
    const result = await connection.execute(statement, [content, momentId]);
    return result[0];
  } catch (error) {
    console.log(error);
  }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://kevin5979.github.io/post-images/1635299905534.jpg" alt="" loading="lazy"></figure>
<p>*成功修改动态</p>
<h2 id="删除一条动态">删除一条动态</h2>
<h3 id="添加路由编辑-routermomentrouterjs-2">添加路由，编辑 router/moment.router.js</h3>
<pre><code class="language-js">const { verifyAuth, verifyPermission } = require('../middleware/auth.middleware');
const { create, detail, list, update, remove } = require('../controller/moment.controller');

// 修改一条动态
/**
verifyAuth : 验证token是否有效
verifyPermission : 验证用户是否具备权限
update : 更新动态
*/
momentRouter.delete(&quot;/:momentId&quot;, verifyAuth, verifyPermission, remove);
</code></pre>
<h3 id="添加-remove-方法修改动态编辑-controllermomentcontrollerjs">添加 remove 方法，修改动态，编辑 controller/moment.controller.js</h3>
<pre><code class="language-js">// 删除动态
async remove(ctx, next) {
  // 1.获取参数
  const { momentId } = ctx.params;
  // 2.删除动态
  const result = await momentService.remove(momentId);
  // 3.返回结果
  ctx.body = result;
}
</code></pre>
<h3 id="添加-remove-方法更新数据库编辑-servicemomentservicejs">添加 remove 方法，更新数据库，编辑 service/moment.service.js</h3>
<pre><code class="language-js">// 删除动态
async remove(momentId) {
  try {
    const statement = `DELETE FROM moment WHERE id = ?`;
    const result = await connection.execute(statement, [momentId]);
    console.log(result);
    return result[0];
  } catch (error) {
    console.log(error);
  }
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="http://kevin5979.github.io/post-images/1635300142067.jpg" alt="" loading="lazy"></figure>
<p>*成功删除动态</p>
<h2 id="动态-点赞取消点赞">动态 点赞/取消点赞</h2>
<h3 id="为-moment-表添加-点赞数-字段">为 moment 表添加 点赞数 字段</h3>
<pre><code class="language-js">ALTER TABLE `moment` ADD likes int(10) DEFAULT 0;
</code></pre>
<h3 id="创建动态点赞表">创建动态点赞表</h3>
<pre><code class="language-js">CREATE TABLE IF NOT EXISTS `support`(
  moment_id INT NOT NULL,
  user_id INT NOT NULL
);
</code></pre>
<h3 id="添加点赞路由编辑-routermomentrouterjs">添加点赞路由，编辑 router/moment.router.js</h3>
<pre><code class="language-js">const { create, detail, list, update, remove, support } = require('../controller/moment.controller');

// 动态 点赞/取消点赞
momentRouter.get(&quot;/:momentId/support&quot;, verifyAuth, support);
</code></pre>
<h3 id="添加-support-方法编辑-controllermomentcontrollerjs">添加 support 方法，编辑 controller/moment.controller.js</h3>
<pre><code class="language-js">const supportService = require('../service/support.service');  

// 点赞动态
async support(ctx, next) {
  // 1.获取参数
  const { momentId } = ctx.params;
  const { id } = ctx.user;
  // 2.查询点赞表
  const isSupport = await supportService.isSupport(momentId, id);
  if (isSupport) {
    // 已点赞, 需取消点赞
    // 1.更新 点赞表 / 动态表
    const result = await supportService.unSupport(momentId, id);
    ctx.body = result;
  } else {
    // 未点赞, 需点赞
    // 1.更新 点赞表 / 动态表
    const result = await supportService.toSupport(momentId, id);
    ctx.body = result;
  }
}
</code></pre>
<h3 id="编写-issupport-tosupport-unsupport-方法创建-servicesupportservicejs">编写 isSupport 、 toSupport 、 unSupport 方法，创建 service/support.service.js</h3>
<pre><code class="language-js">const connection = require(&quot;../app/database&quot;);

class SupportService {

  // 是否点赞
  async isSupport(momentId, userId) {
    try {
      const statement = `SELECT moment_id, user_id FROM support WHERE moment_id = ? AND user_id = ?`;
      const result = await connection.execute(statement, [momentId, userId]);
      return result[0].length === 0 ? false : true;
    } catch (error) {
      console.log(error);
    }
  }

  // 点赞操作
  async toSupport(momentId, userId) {
    try {
      // 操作点赞表
      const statement1 = `INSERT INTO support (moment_id, user_id) values(?, ?)`;
      // 操作动态表
      const statement2 = `UPDATE moment SET likes = likes + 1 where id = ?`;
      // 执行语句
      await connection.execute(statement1, [momentId, userId]);
      await connection.execute(statement2, [momentId]);
      // 返回结果
      return {
        isSupport: true
      }
    } catch (error) {
      console.log(error);
    }
  }

  // 取消点赞操作
  async unSupport(momentId, userId) {
    try {
      // 操作点赞表
      const statement1 = `DELETE FROM support WHERE moment_id = ? AND user_id = ?`;
      // 操作动态表
      const statement2 = `UPDATE moment SET likes = likes - 1 where id = ?`;
      // 执行语句
      await connection.execute(statement1, [momentId, userId]);
      await connection.execute(statement2, [momentId]);
      // 返回结果
      return {
        isSupport: false
      }
    } catch (error) {
      console.log(error);
    }
  }

}

module.exports = new SupportService();
</code></pre>
<p><img src="http://kevin5979.github.io/post-images/1635300458618.jpg" alt="" loading="lazy"><br>
<img src="http://kevin5979.github.io/post-images/1635300390687.jpg" alt="" loading="lazy"></p>
<p>*动态接口基本完成</p>
<h2 id="总结一下">总结一下</h2>
<h3 id="编写接口的几个步骤">编写接口的几个步骤</h3>
<ol>
<li>创建数据库、表</li>
<li>创建路由 =&gt; router.js</li>
<li>创建处理函数，(接收参数等操作 + 连接路由和数据库操作) =&gt; controller.js</li>
<li>创建数据库操作函数 =&gt; service.js</li>
<li>其余更多操作(如鉴权)，可使用中间件实现 =&gt; auth.js</li>
</ol>
<br/>
<font size="2">最后更新于 2021-10-27</font>
]]></content>
    </entry>
</feed>